[{"id":"4a9d58ca.b562a8","type":"emoncms-server","server":"http://emoncms.org","name":"emoncms.org"},{"id":"aad281b0.552d8","type":"serial-port","serialport":"/dev/ttyUSB0","serialbaud":"1200","databits":"7","parity":"even","stopbits":"1","newline":"0x3","bin":"false","out":"char","addchar":false},{"id":"bb3ba523.44c458","type":"serial in","name":"","serial":"aad281b0.552d8","x":69.5,"y":20,"z":"6b025576.94fdac","wires":[["9aa39ad7.655c68"]]},{"id":"9aa39ad7.655c68","type":"function","name":"Valider Trame","func":"// La trame complète est reçue dans 'msg'\nvar teleinfo={};\n\n// Enlever les codes début et fin de trame et récupérer les lignes 1 à 1\nvar lines = msg.payload.toString().replace(\"\\u0002\\n\",\"\").replace(\"\\r\\u0003\",\"\");\nlines = lines.split(\"\\r\\n\");\n\n// Pour chaque ligne\nfor (var line in lines) {\n\tvar i;\n  \tvar checksum = 32;\n  \t\n  \t// Recupérer le label, la valeur et la checksum\n  \t// si la checksum est un espace on le remplace par un caractère non \n  \t// autorisé en checksum (ici 's') pour eviter pb de split\n  \t// donc espace espace devient espace s\n\tvar myline = lines[line].toString().replace(\"  \",\" s\").split(\" \");\n\t\n\t// on dépile nos 3 valeurs\n\tvar check = myline.pop();\n\tvar value = myline.pop();\n\tvar label = myline.pop();\n\t\n\t// On peu repositionner la checksum à espace si c'était le cas\n\tif (check == \"s\") check = \" \";\n\n\t// Calcul de la checksum sur ce qu'on a reçu, on balaye tous les caractères\t\t\n  \tfor (i = 0; i < label.length; i++) checksum += label.charCodeAt(i);\n  \tfor (i = 0; i < value.length; i++) checksum += value.charCodeAt(i);\n \tchecksum = ((checksum%256) & 63) + 32;\n \tchecksum = String.fromCharCode(checksum);\n\t\n\t// Checksum correcte ?\n \tif (checksum == check ) {\n\t\tteleinfo[label] = value;\n\t} else {\n\t\tconsole.log(\"'%s' '%s' '%s' => Bad Checksum '%s'\", label, value, check, checksum );\n\t}\n}\nreturn [ { payload: teleinfo } ];","outputs":1,"noerr":0,"x":244,"y":20,"z":"6b025576.94fdac","wires":[["59ec27a.fa613d8"]]},{"id":"59ec27a.fa613d8","type":"function","name":"Convertir Etiquettes","func":"function isNumeric(n) { \n      return !isNaN(parseFloat(n)) && isFinite(n); \n}\n\n// Pour tous les labels \nfor (var label in msg.payload ) {\n    var value = msg.payload[label];\n    \n\t// Correction des valeurs type string en numérique \t\t\n\tif (label == \"OPTARIF\")\t{\n  \t\t// L'option tarifaire choisie (Groupe \"OPTARIF\") est codée sur 4 caractères alphanumériques \n  \t\t// J'ai pris un nombre arbitraire codé dans l'ordre ci-dessous \n  \t\t// je mets le 4eme char à 0, trop de possibilités \n      \tvalue = value.substring(0, 3);\n    \n       \tif      (value==\"BAS\") value=1;// BASE => Option Base. \n  \t\telse if (value==\"HC.\") value=2;// HC.. => Option Heures Creuses. \n  \t\telse if (value==\"EJP\") value=3;// EJP. => Option EJP. \n  \t\telse if (value==\"BBR\") value=4;// BBRx => Option Tempo\n  \t\telse value = 0;\n  \t\t\n  \t\tmsg.payload[label] = value;\n\t} else if (label==\"HHPHC\") {\n      // L'horaire heures pleines/heures creuses (Groupe \"HHPHC\") est codé par un caractère A à Y \n      // J'ai choisi de prendre son code ASCII\n      msg.payload[label] = value.charCodeAt();\n    } else if ( label == \"PTEC\") {\n      // La période tarifaire en cours (Groupe \"PTEC\"), est codée sur 4 caractères \n      // J'ai pris un nombre arbitraire codé dans l'ordre ci-dessous\n      if      (value==\"TH..\") value= 1; // Toutes les Heures. \n      else if (value==\"HC..\") value= 2; // Heures Creuses. \n      else if (value==\"HP..\") value= 3; // Heures Pleines. \n      else if (value==\"HN..\") value= 4; // Heures Normales. \n      else if (value==\"PM..\") value= 5; // Heures de Pointe Mobile. \n      else if (value==\"HCJB\") value= 6; // Heures Creuses Jours Bleus. \n      else if (value==\"HCJW\") value= 7; // Heures Creuses Jours Blancs (White). \n      else if (value==\"HCJR\") value= 8; // Heures Creuses Jours Rouges. \n      else if (value==\"HPJB\") value= 9; // Heures Pleines Jours Bleus. \n      else if (value==\"HPJW\") value= 10;// Heures Pleines Jours Blancs (White). \n      else if (value==\"HPJR\") value= 11;// Heures Pleines Jours Rouges. \n      else value = 0;\n      \n      msg.payload[label] = value;\n//    } else if ( label == \"IINST\") {\n//        delete msg.payload.IINST;\n//        msg.payload.IINST1 = (msg.payload.PAPP/msg.payload.TENSION).toFixed(3);\n//    } else if ( label == \"IMAX\") {\n//        delete msg.payload.IMAX;\n//        msg.payload.IMAX1 = Number(value);\n    } else if ( isNumeric(value) && label != \"ADCO\" ) {\n        // Transformer les valeurs numériques\n        msg.payload[label] = Number(value);\n    }\n}\n\n// Sauvegarde dans le contexte global\ncontext.global.teleinfo = msg.payload;\n\nreturn msg;","outputs":1,"noerr":0,"x":443,"y":20,"z":"6b025576.94fdac","wires":[[]]},{"id":"8ad4b7.ff752b48","type":"inject","name":"10s","topic":"","payload":"","payloadType":"date","repeat":"10","crontab":"","once":true,"x":81,"y":174,"z":"6b025576.94fdac","wires":[["6cf16d89.930e94"]]},{"id":"fbca97d3.043568","type":"inject","name":"5m","topic":"","payload":"","payloadType":"date","repeat":"300","crontab":"","once":true,"x":81,"y":218,"z":"6b025576.94fdac","wires":[["fad352d6.052cb"]]},{"id":"6cf16d89.930e94","type":"function","name":"Valeurs Temps Reel","func":"var str = \"\";\nvar ti = context.global.teleinfo;\n\nfor (var label in ti) {\n//\tif (label==\"ADPS\" || label==\"PAPP\" || label==\"TENSION\" || label==\"IINST1\" || label==\"IMAX1\" ) {\n\tif (label==\"ADPS\" || label==\"PAPP\" || label==\"TENSION\" || label==\"IINST\" ) {\n         if (str.length>0)\n            str+=\",\"\n            \n         str += label + \":\"+ ti[label];\n\t}\n}\nreturn [ { payload: str } ];","outputs":1,"noerr":0,"x":274,"y":174,"z":"6b025576.94fdac","wires":[["96a29790.695d68"]]},{"id":"fad352d6.052cb","type":"function","name":"Toutes Valeurs","func":"var str = \"\";\nvar ti = context.global.teleinfo;\n\nfor (var label in ti) {\n    if (str.length>0)\n        str+=\",\"\n\n    str += label + \":\"+ ti[label];\n}\n\nreturn [ { payload: str } ];","outputs":1,"noerr":0,"x":258,"y":218,"z":"6b025576.94fdac","wires":[["96a29790.695d68"]]},{"id":"96a29790.695d68","type":"emoncms","name":"emoncms.org","emonServer":"4a9d58ca.b562a8","nodegroup":"1","x":523,"y":174,"z":"6b025576.94fdac","wires":[]}]
